import { useState, useEffect } from 'react';
import { Calculator, BarChart3, Download } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { PieChart, Pie, Cell, ResponsiveContainer, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';
import * as XLSX from 'xlsx';
import { saveAs } from 'file-saver';
import ExcelJS from 'exceljs';

interface GradeData {
  grade5: number;
  grade4: number;
  grade3: number;
  grade2: number;
}

interface Results {
  averageGrade: number;
  knowledgeQuality: number;
  performance: number;
  totalStudents: number;
}

const SubjectCalculator = () => {
  const [subjectName, setSubjectName] = useState(() => 
    localStorage.getItem('subjectName') || ''
  );
  const [studentCount, setStudentCount] = useState(() => 
    localStorage.getItem('studentCount') || ''
  );
  const [grades, setGrades] = useState<GradeData>(() => {
    const saved = localStorage.getItem('subjectGrades');
    return saved ? JSON.parse(saved) : {
      grade5: 0,
      grade4: 0,
      grade3: 0,
      grade2: 0
    };
  });
  const [results, setResults] = useState<Results | null>(null);

  const handleGradeInputFocus = (field: keyof GradeData) => {
    if (grades[field] === 0) {
      setGrades(prev => ({ ...prev, [field]: '' as any }));
    }
  };

  const handleGradeInputBlur = (field: keyof GradeData, value: string) => {
    const numValue = parseInt(value) || 0;
    setGrades(prev => ({ ...prev, [field]: numValue }));
  };

  const handleStudentCountFocus = () => {
    if (studentCount === '0') {
      setStudentCount('');
    }
  };

  const handleStudentCountBlur = (value: string) => {
    if (value === '') {
      setStudentCount('0');
    }
  };

  const calculateMetrics = () => {
    const totalGrades = grades.grade5 + grades.grade4 + grades.grade3 + grades.grade2;
    const studentCountNum = parseInt(studentCount) || 0;
    
    if (totalGrades === 0) {
      alert('–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –æ—Ü–µ–Ω–∫—É!');
      return;
    }
    
    if (studentCountNum === 0) {
      alert('–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–µ–Ω–∏–∫–æ–≤!');
      return;
    }
    
    if (totalGrades !== studentCountNum) {
      alert(`–û—à–∏–±–∫–∞: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–µ–Ω–∏–∫–æ–≤ (${studentCountNum}) –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–±—â–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ—Ü–µ–Ω–æ–∫ (${totalGrades})!`);
      return;
    }

    const weightedSum = (grades.grade5 * 5) + (grades.grade4 * 4) + (grades.grade3 * 3) + (grades.grade2 * 2);
    const averageGrade = weightedSum / totalGrades;
    const qualityGrades = grades.grade5 + grades.grade4;
    const knowledgeQuality = (qualityGrades / totalGrades) * 100;
    const performanceGrades = grades.grade5 + grades.grade4 + grades.grade3;
    const performance = (performanceGrades / totalGrades) * 100;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ localStorage
    localStorage.setItem('subjectName', subjectName);
    localStorage.setItem('studentCount', studentCount);
    localStorage.setItem('subjectGrades', JSON.stringify(grades));

    setResults({
      averageGrade: parseFloat(averageGrade.toFixed(2)),
      knowledgeQuality: parseFloat(knowledgeQuality.toFixed(1)),
      performance: parseFloat(performance.toFixed(1)),
      totalStudents: studentCountNum
    });
  };



  const downloadXLSX = async () => {
    if (!results) return;
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ä–∞–±–æ—á—É—é –∫–Ω–∏–≥—É ExcelJS
    const workbook = new ExcelJS.Workbook();
    const worksheet = workbook.addWorksheet('–û—Ç—á–µ—Ç –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É');
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
    worksheet.columns = [
      { header: '', key: 'count', width: 18 },
      { header: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', key: 'count', width: 18 },
      { header: '–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞', key: 'percentage', width: 22 }
    ];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–º —ç—Ñ—Ñ–µ–∫—Ç–æ–º
    const titleRow = worksheet.addRow(['EduMetrics - –û—Ç—á–µ—Ç –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É']);
    titleRow.font = { bold: true, size: 18, color: { argb: 'FFFFFFFF' } };
    titleRow.alignment = { horizontal: 'center', vertical: 'middle' };
    titleRow.height = 35;
    worksheet.mergeCells('A1:C1');
    
    // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
    titleRow.getCell(1).fill = {
      type: 'pattern',
      pattern: 'solid',
      fgColor: { argb: 'FF2563EB' }
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–Ω—å –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
    titleRow.getCell(1).border = {
      bottom: { style: 'medium', color: { argb: 'FF1E40AF' } }
    };



    // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    worksheet.addRow([]);
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥–º–µ—Ç–µ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
    const subjectRow = worksheet.addRow(['–ü—Ä–µ–¥–º–µ—Ç:', subjectName || '–ù–µ —É–∫–∞–∑–∞–Ω']);
    subjectRow.font = { bold: true, size: 14, color: { argb: 'FF2563EB' } };
    subjectRow.height = 25;
    subjectRow.getCell(1).fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFF0F4F8' } };
    subjectRow.getCell(2).fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFF8FAFC' } };
    worksheet.mergeCells('A2:C2');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —Å–µ–∫—Ü–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞
    subjectRow.getCell(1).border = {
      top: { style: 'thin', color: { argb: 'FFE2E8F0' } },
      bottom: { style: 'thin', color: { argb: 'FFE2E8F0' } },
      left: { style: 'thin', color: { argb: 'FFE2E8F0' } },
      right: { style: 'thin', color: { argb: 'FFE2E8F0' } }
    };
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —É—á–µ–Ω–∏–∫–æ–≤
    const studentsRow = worksheet.addRow(['–ö–æ–ª–ª. —É—á–µ–Ω–∏–∫–æ–≤:', results.totalStudents]);
    studentsRow.font = { bold: true, size: 14, color: { argb: 'FF2563EB' } };
    studentsRow.height = 25;
    studentsRow.getCell(1).fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFF0F4F8' } };
    studentsRow.getCell(2).fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFF8FAFC' } };
    worksheet.mergeCells('A3:C3');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —Å–µ–∫—Ü–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–µ–Ω–∏–∫–æ–≤
    studentsRow.getCell(1).border = {
      top: { style: 'thin', color: { argb: 'FFE2E8F0' } },
      bottom: { style: 'thin', color: { argb: 'FFE2E8F0' } },
      left: { style: 'thin', color: { argb: 'FFE2E8F0' } },
      right: { style: 'thin', color: { argb: 'FFE2E8F0' } }
    };
    
    // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    worksheet.addRow([]);
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Å –∫–∞—Ä—Ç–æ—á–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
    const indicatorsRow = worksheet.addRow(['–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:']);
    indicatorsRow.font = { bold: true, size: 13, color: { argb: 'FFFFFFFF' } };
    indicatorsRow.height = 28;
    indicatorsRow.getCell(1).fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF2563EB' } };
    indicatorsRow.alignment = { horizontal: 'center', vertical: 'middle' };
    worksheet.mergeCells('A7:C7');
  
    // –î–∞–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π —Å —Ü–≤–µ—Ç–æ–≤—ã–º –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    const metricsData = [
      ['–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª:', results.averageGrade, 'üìä'],
      ['–ö–∞—á–µ—Å—Ç–≤–æ –∑–Ω–∞–Ω–∏–π:', `${results.knowledgeQuality}%`, 'üìà'],
      ['–£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å:', `${results.performance}%`, 'üéØ'],
      ['–í—Å–µ–≥–æ –æ—Ü–µ–Ω–æ–∫:', grades.grade5 + grades.grade4 + grades.grade3 + grades.grade2, 'üìã']
    ];
    
    metricsData.forEach((data, index) => {
      const row = worksheet.addRow(data);
      row.height = 22;
      
      // –°—Ç–∏–ª–∏ –¥–ª—è –º–µ—Ç–æ–∫
      row.getCell(1).font = { bold: true, size: 11, color: { argb: 'FF374151' } };
      row.getCell(1).fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFF9FAFB' } };
      
      // –°—Ç–∏–ª–∏ –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏–π —Å —Ü–≤–µ—Ç–æ–≤—ã–º –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
      const colors = ['FF3B82F6', 'FF10B981', 'FFF59E0B', 'FF8B5CF6'];
      row.getCell(2).font = { bold: true, size: 12, color: { argb: 'FFFFFFFF' } };
      row.getCell(2).fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: colors[index] } };
      row.getCell(2).alignment = { horizontal: 'center' };
      
      // –°—Ç–∏–ª–∏ –¥–ª—è –∏–∫–æ–Ω–æ–∫
      row.getCell(3).font = { size: 12 };
      row.getCell(3).alignment = { horizontal: 'center' };
      
      // –ì—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
      row.eachCell((cell) => {
        cell.border = {
          top: { style: 'thin', color: { argb: 'FFE5E7EB' } },
          bottom: { style: 'thin', color: { argb: 'FFE5E7EB' } },
          left: { style: 'thin', color: { argb: 'FFE5E7EB' } },
          right: { style: 'thin', color: { argb: 'FFE5E7EB' } }
        };
      });
    });
    
    // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    worksheet.addRow([]);
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å—Ç–∏–ª–µ–º
    const tableTitleRow = worksheet.addRow(['–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫:']);
    tableTitleRow.font = { bold: true, size: 13, color: { argb: 'FFFFFFFF' } };
    tableTitleRow.height = 28;
    tableTitleRow.getCell(1).fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF2563EB' } };
    tableTitleRow.alignment = { horizontal: 'center', vertical: 'middle' };
    worksheet.mergeCells('A13:C13');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
    tableTitleRow.getCell(1).border = {
      top: { style: 'thin', color: { argb: 'FF2563EB' } },
      bottom: { style: 'thin', color: { argb: 'FF2563EB' } },
      left: { style: 'thin', color: { argb: 'FF2563EB' } },
      right: { style: 'thin', color: { argb: 'FF2563EB' } }
    };
    
    // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    worksheet.addRow([]);
    
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
    const headerRow = worksheet.addRow(['–û—Ü–µ–Ω–∫–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞']);
    headerRow.height = 25;
    headerRow.font = { bold: true, size: 11, color: { argb: 'FFFFFFFF' } };
    headerRow.getCell(1).fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF1E40AF' } };
    headerRow.getCell(2).fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF1E40AF' } };
    headerRow.getCell(3).fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF1E40AF' } };
    headerRow.alignment = { horizontal: 'center', vertical: 'middle' };
    
    // –ì—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–∞–±–ª–∏—Ü—ã
    headerRow.eachCell((cell) => {
      cell.border = {
        top: { style: 'thin', color: { argb: 'FF1E40AF' } },
        bottom: { style: 'thin', color: { argb: 'FF1E40AF' } },
        left: { style: 'thin', color: { argb: 'FF1E40AF' } },
        right: { style: 'thin', color: { argb: 'FF1E40AF' } }
      };
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –æ—Ü–µ–Ω–∫–∞–º —Å —Ü–≤–µ—Ç–æ–≤—ã–º –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    const totalGrades = grades.grade5 + grades.grade4 + grades.grade3 + grades.grade2;
    const gradeData = [
      ['5 (–û—Ç–ª–∏—á–Ω–æ)', grades.grade5, `${((grades.grade5 / totalGrades) * 100).toFixed(1)}%`],
      ['4 (–•–æ—Ä–æ—à–æ)', grades.grade4, `${((grades.grade4 / totalGrades) * 100).toFixed(1)}%`],
      ['3 (–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ)', grades.grade3, `${((grades.grade3 / totalGrades) * 100).toFixed(1)}%`],
      ['2 (–ù–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ)', grades.grade2, `${((grades.grade2 / totalGrades) * 100).toFixed(1)}%`]
    ];
    
    const gradeColors = ['FF10B981', 'FF3B82F6', 'FFF59E0B', 'FFEF4444'];
    
    gradeData.forEach((data, index) => {
      const dataRow = worksheet.addRow(data);
      dataRow.height = 22;
      
      // –°—Ç–∏–ª–∏ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π –æ—Ü–µ–Ω–æ–∫
      dataRow.getCell(1).font = { bold: true, size: 11, color: { argb: 'FF374151' } };
      dataRow.getCell(1).fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFF9FAFB' } };
      
      // –°—Ç–∏–ª–∏ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å —Ü–≤–µ—Ç–æ–≤—ã–º –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
      dataRow.getCell(2).font = { bold: true, size: 11, color: { argb: 'FFFFFFFF' } };
      dataRow.getCell(2).fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: gradeColors[index] } };
      dataRow.getCell(2).alignment = { horizontal: 'center' };
      
      // –°—Ç–∏–ª–∏ –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
      dataRow.getCell(3).font = { size: 11, color: { argb: 'FF6B7280' } };
      dataRow.getCell(3).fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFF8FAFC' } };
      dataRow.getCell(3).alignment = { horizontal: 'center' };
      
      // –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã
      dataRow.eachCell((cell) => {
        cell.border = {
          top: { style: 'thin', color: { argb: 'FFE5E7EB' } },
          bottom: { style: 'thin', color: { argb: 'FFE5E7EB' } },
          left: { style: 'thin', color: { argb: 'FFE5E7EB' } },
          right: { style: 'thin', color: { argb: 'FFE5E7EB' } }
        };
      });
    });
    
    // –ì—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–∞–±–ª–∏—Ü—ã
   // headerRow.eachCell((cell) => {
    //  cell.border = {
    //   top: { style: 'thin', color: { argb: 'FF1E40AF' } },
    //    bottom: { style: 'thin', color: { argb: 'FF1E40AF' } },
    //   left: { style: 'thin', color: { argb: 'FF1E40AF' } },
    //    right: { style: 'thin', color: { argb: 'FF1E40AF' } }
    //  };
    //});
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
    const totalRow = worksheet.addRow(['–ò–¢–û–ì–û:', totalGrades, '100%']);
    totalRow.height = 25;
    totalRow.getCell(1).font = { bold: true, size: 12, color: { argb: 'FFFFFFFF' } };
    totalRow.getCell(1).fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF2563EB' } };
    totalRow.getCell(2).font = { bold: true, size: 12, color: { argb: 'FFFFFFFF' } };
    totalRow.getCell(2).fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF2563EB' } };
    totalRow.getCell(2).alignment = { horizontal: 'center' };
    totalRow.getCell(3).font = { bold: true, size: 12, color: { argb: 'FFFFFFFF' } };
    totalRow.getCell(3).fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF2563EB' } };
    totalRow.getCell(3).alignment = { horizontal: 'center' };
    
    // –ì—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
    totalRow.eachCell((cell) => {
      cell.border = {
        top: { style: 'medium', color: { argb: 'FF2563EB' } },
        bottom: { style: 'medium', color: { argb: 'FF2563EB' } },
        left: { style: 'medium', color: { argb: 'FF2563EB' } },
        right: { style: 'medium', color: { argb: 'FF2563EB' } }
      };
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    const fileName = subjectName ? `${subjectName}_–æ—Ç—á–µ—Ç.xlsx` : '–æ—Ç—á–µ—Ç_–ø–æ_–ø—Ä–µ–¥–º–µ—Ç—É.xlsx';
    const buffer = await workbook.xlsx.writeBuffer();
    saveAs(new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' }), fileName);
  };

  const pieData = results ? [
    { name: '–û—Ç–ª–∏—á–Ω–æ (5)', value: grades.grade5, color: '#10B981' },
    { name: '–•–æ—Ä–æ—à–æ (4)', value: grades.grade4, color: '#3B82F6' },
    { name: '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ (3)', value: grades.grade3, color: '#F59E0B' },
    { name: '–ù–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ (2)', value: grades.grade2, color: '#EF4444' }
  ] : [];

  const performanceData = results ? [
    { name: '–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª', value: results.averageGrade, color: '#3B82F6' },
    { name: '–ö–∞—á–µ—Å—Ç–≤–æ –∑–Ω–∞–Ω–∏–π (%)', value: results.knowledgeQuality, color: '#10B981' },
    { name: '–£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å (%)', value: results.performance, color: '#F59E0B' }
  ] : [];

  const barData = results ? [
    { grade: '5', count: grades.grade5, color: '#10B981' },
    { grade: '4', count: grades.grade4, color: '#3B82F6' },
    { grade: '3', count: grades.grade3, color: '#F59E0B' },
    { grade: '2', count: grades.grade2, color: '#EF4444' }
  ] : [];

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Calculator className="w-5 h-5" />
            –†–∞—Å—á—ë—Ç –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É
          </CardTitle>
          <CardDescription>
            –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ –±–∞–ª–ª–∞ –∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–Ω–∞–Ω–∏–π
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid md:grid-cols-2 gap-4">
            <div>
              <Label htmlFor="subject">–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞</Label>
              <Input
                id="subject"
                value={subjectName}
                onChange={(e) => {
                  setSubjectName(e.target.value);
                  localStorage.setItem('subjectName', e.target.value);
                }}
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"
              />
            </div>
            <div>
              <Label htmlFor="students">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—â–∏—Ö—Å—è</Label>
              <Input
                id="students"
                type="number"
                value={studentCount}
                onChange={(e) => {
                  setStudentCount(e.target.value);
                  localStorage.setItem('studentCount', e.target.value);
                }}
                onFocus={handleStudentCountFocus}
                onBlur={(e) => handleStudentCountBlur(e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"
              />
            </div>
          </div>

          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            <div>
              <Label htmlFor="grade5">–û—Ü–µ–Ω–æ–∫ "5"</Label>
              <Input
                id="grade5"
                type="number"
                value={grades.grade5 === 0 ? '' : grades.grade5}
                onChange={(e) => {
                  const newGrades = { ...grades, grade5: parseInt(e.target.value) || 0 };
                  setGrades(newGrades);
                  localStorage.setItem('subjectGrades', JSON.stringify(newGrades));
                }}
                onFocus={() => handleGradeInputFocus('grade5')}
                onBlur={(e) => handleGradeInputBlur('grade5', e.target.value)}
                placeholder="0"
              />
            </div>
            <div>
              <Label htmlFor="grade4">–û—Ü–µ–Ω–æ–∫ "4"</Label>
              <Input
                id="grade4"
                type="number"
                value={grades.grade4 === 0 ? '' : grades.grade4}
                onChange={(e) => {
                  const newGrades = { ...grades, grade4: parseInt(e.target.value) || 0 };
                  setGrades(newGrades);
                  localStorage.setItem('subjectGrades', JSON.stringify(newGrades));
                }}
                onFocus={() => handleGradeInputFocus('grade4')}
                onBlur={(e) => handleGradeInputBlur('grade4', e.target.value)}
                placeholder="0"
              />
            </div>
            <div>
              <Label htmlFor="grade3">–û—Ü–µ–Ω–æ–∫ "3"</Label>
              <Input
                id="grade3"
                type="number"
                value={grades.grade3 === 0 ? '' : grades.grade3}
                onChange={(e) => {
                  const newGrades = { ...grades, grade3: parseInt(e.target.value) || 0 };
                  setGrades(newGrades);
                  localStorage.setItem('subjectGrades', JSON.stringify(newGrades));
                }}
                onFocus={() => handleGradeInputFocus('grade3')}
                onBlur={(e) => handleGradeInputBlur('grade3', e.target.value)}
                placeholder="0"
              />
            </div>
            <div>
              <Label htmlFor="grade2">–û—Ü–µ–Ω–æ–∫ "2"</Label>
              <Input
                id="grade2"
                type="number"
                value={grades.grade2 === 0 ? '' : grades.grade2}
                onChange={(e) => {
                  const newGrades = { ...grades, grade2: parseInt(e.target.value) || 0 };
                  setGrades(newGrades);
                  localStorage.setItem('subjectGrades', JSON.stringify(newGrades));
                }}
                onFocus={() => handleGradeInputFocus('grade2')}
                onBlur={(e) => handleGradeInputBlur('grade2', e.target.value)}
                placeholder="0"
              />
            </div>
          </div>

          <Button onClick={calculateMetrics} className="w-full">
            –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
          </Button>
        </CardContent>
      </Card>

      {results && (
        <div className="grid md:grid-cols-2 gap-6">
          <Card>
            <CardHeader>
              <CardTitle className="text-blue-600 flex items-center justify-between">
                –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á—ë—Ç–∞
                <div className="flex gap-2">
                  <Button onClick={downloadXLSX} variant="outline" size="sm">
                    <Download className="w-4 h-4 mr-2" />
                    –°–∫–∞—á–∞—Ç—å XLSX
                  </Button>
                </div>
              </CardTitle>
              {subjectName && <CardDescription>–ü—Ä–µ–¥–º–µ—Ç: {subjectName}</CardDescription>}
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="bg-gradient-to-r from-blue-50 to-indigo-50 p-4 rounded-lg">
                <div className="text-sm text-gray-600">–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª</div>
                <div className="text-3xl font-bold text-blue-600">{results.averageGrade}</div>
              </div>
              <div className="bg-gradient-to-r from-green-50 to-emerald-50 p-4 rounded-lg">
                <div className="text-sm text-gray-600">–ö–∞—á–µ—Å—Ç–≤–æ –∑–Ω–∞–Ω–∏–π</div>
                <div className="text-3xl font-bold text-green-600">{results.knowledgeQuality}%</div>
              </div>
              <div className="bg-gradient-to-r from-orange-50 to-yellow-50 p-4 rounded-lg">
                <div className="text-sm text-gray-600">–£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å</div>
                <div className="text-3xl font-bold text-orange-600">{results.performance}%</div>
              </div>
              <div className="bg-gradient-to-r from-purple-50 to-pink-50 p-4 rounded-lg">
                <div className="text-sm text-gray-600">–í—Å–µ–≥–æ –æ—Ü–µ–Ω–æ–∫</div>
                <div className="text-3xl font-bold text-purple-600">
                  {grades.grade5 + grades.grade4 + grades.grade3 + grades.grade2}
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <BarChart3 className="w-5 h-5" />
                –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫
              </CardTitle>
            </CardHeader>
            <CardContent>
              <ResponsiveContainer width="100%" height={300}>
                <PieChart>
                  <Pie
                    data={pieData}
                    cx="50%"
                    cy="50%"
                    outerRadius={80}
                    dataKey="value"
                    label={({ name, value }) => value > 0 ? `${value}` : ''}
                  >
                    {pieData.map((entry, index) => (
                      <Cell key={`cell-${index}`} fill={entry.color} />
                    ))}
                  </Pie>
                  <Tooltip />
                  <Legend />
                </PieChart>
              </ResponsiveContainer>
            </CardContent>
          </Card>

          <Card className="md:col-span-2">
            <CardHeader>
              <CardTitle>–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏</CardTitle>
            </CardHeader>
            <CardContent>
              <ResponsiveContainer width="100%" height={300}>
                <BarChart data={performanceData}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="name" />
                  <YAxis />
                  <Tooltip />
                  <Bar dataKey="value" fill="#3B82F6" />
                </BarChart>
              </ResponsiveContainer>
            </CardContent>
          </Card>

          <Card className="md:col-span-2">
            <CardHeader>
              <CardTitle>–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –æ—Ü–µ–Ω–æ–∫</CardTitle>
            </CardHeader>
            <CardContent>
              <ResponsiveContainer width="100%" height={300}>
                <BarChart data={barData}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="grade" />
                  <YAxis />
                  <Tooltip />
                  <Bar dataKey="count" fill="#3B82F6" />
                </BarChart>
              </ResponsiveContainer>
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  );
};

export default SubjectCalculator;
